// Code generated by protoc-gen-go.
// source: tensorflow/core/framework/log_memory.proto
// DO NOT EDIT!

package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MemoryLogStep struct {
	// Process-unique step id.
	StepId int64 `protobuf:"varint,1,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
	// Handle describing the feeds and fetches of the step.
	Handle string `protobuf:"bytes,2,opt,name=handle" json:"handle,omitempty"`
}

func (m *MemoryLogStep) Reset()                    { *m = MemoryLogStep{} }
func (m *MemoryLogStep) String() string            { return proto.CompactTextString(m) }
func (*MemoryLogStep) ProtoMessage()               {}
func (*MemoryLogStep) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

type MemoryLogTensorAllocation struct {
	// Process-unique step id.
	StepId int64 `protobuf:"varint,1,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
	// Name of the kernel making the allocation as set in GraphDef,
	// e.g., "affine2/weights/Assign".
	KernelName string `protobuf:"bytes,2,opt,name=kernel_name,json=kernelName" json:"kernel_name,omitempty"`
	// Allocated tensor details.
	Tensor *TensorDescription `protobuf:"bytes,3,opt,name=tensor" json:"tensor,omitempty"`
}

func (m *MemoryLogTensorAllocation) Reset()                    { *m = MemoryLogTensorAllocation{} }
func (m *MemoryLogTensorAllocation) String() string            { return proto.CompactTextString(m) }
func (*MemoryLogTensorAllocation) ProtoMessage()               {}
func (*MemoryLogTensorAllocation) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *MemoryLogTensorAllocation) GetTensor() *TensorDescription {
	if m != nil {
		return m.Tensor
	}
	return nil
}

type MemoryLogTensorDeallocation struct {
	// Id of the tensor buffer being deallocated, used to match to a
	// corresponding allocation.
	AllocationId int64 `protobuf:"varint,1,opt,name=allocation_id,json=allocationId" json:"allocation_id,omitempty"`
	// Name of the allocator used.
	AllocatorName string `protobuf:"bytes,2,opt,name=allocator_name,json=allocatorName" json:"allocator_name,omitempty"`
}

func (m *MemoryLogTensorDeallocation) Reset()                    { *m = MemoryLogTensorDeallocation{} }
func (m *MemoryLogTensorDeallocation) String() string            { return proto.CompactTextString(m) }
func (*MemoryLogTensorDeallocation) ProtoMessage()               {}
func (*MemoryLogTensorDeallocation) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

type MemoryLogTensorOutput struct {
	// Process-unique step id.
	StepId int64 `protobuf:"varint,1,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
	// Name of the kernel producing an output as set in GraphDef, e.g.,
	// "affine2/weights/Assign".
	KernelName string `protobuf:"bytes,2,opt,name=kernel_name,json=kernelName" json:"kernel_name,omitempty"`
	// Index of the output being set.
	Index int32 `protobuf:"varint,3,opt,name=index" json:"index,omitempty"`
	// Output tensor details.
	Tensor *TensorDescription `protobuf:"bytes,4,opt,name=tensor" json:"tensor,omitempty"`
}

func (m *MemoryLogTensorOutput) Reset()                    { *m = MemoryLogTensorOutput{} }
func (m *MemoryLogTensorOutput) String() string            { return proto.CompactTextString(m) }
func (*MemoryLogTensorOutput) ProtoMessage()               {}
func (*MemoryLogTensorOutput) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *MemoryLogTensorOutput) GetTensor() *TensorDescription {
	if m != nil {
		return m.Tensor
	}
	return nil
}

type MemoryLogRawAllocation struct {
	// Process-unique step id.
	StepId int64 `protobuf:"varint,1,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
	// Name of the operation making the allocation.
	Operation string `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
	// Number of bytes in the allocation.
	NumBytes int64 `protobuf:"varint,3,opt,name=num_bytes,json=numBytes" json:"num_bytes,omitempty"`
	// Address of the allocation.
	Ptr uint64 `protobuf:"varint,4,opt,name=ptr" json:"ptr,omitempty"`
	// Id of the tensor buffer being allocated, used to match to a
	// corresponding deallocation.
	AllocationId int64 `protobuf:"varint,5,opt,name=allocation_id,json=allocationId" json:"allocation_id,omitempty"`
	// Name of the allocator used.
	AllocatorName string `protobuf:"bytes,6,opt,name=allocator_name,json=allocatorName" json:"allocator_name,omitempty"`
}

func (m *MemoryLogRawAllocation) Reset()                    { *m = MemoryLogRawAllocation{} }
func (m *MemoryLogRawAllocation) String() string            { return proto.CompactTextString(m) }
func (*MemoryLogRawAllocation) ProtoMessage()               {}
func (*MemoryLogRawAllocation) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

type MemoryLogRawDeallocation struct {
	// Process-unique step id.
	StepId int64 `protobuf:"varint,1,opt,name=step_id,json=stepId" json:"step_id,omitempty"`
	// Name of the operation making the deallocation.
	Operation string `protobuf:"bytes,2,opt,name=operation" json:"operation,omitempty"`
	// Id of the tensor buffer being deallocated, used to match to a
	// corresponding allocation.
	AllocationId int64 `protobuf:"varint,3,opt,name=allocation_id,json=allocationId" json:"allocation_id,omitempty"`
	// Name of the allocator used.
	AllocatorName string `protobuf:"bytes,4,opt,name=allocator_name,json=allocatorName" json:"allocator_name,omitempty"`
	// True if the deallocation is queued and will be performed later,
	// e.g. for GPU lazy freeing of buffers.
	Deferred bool `protobuf:"varint,5,opt,name=deferred" json:"deferred,omitempty"`
}

func (m *MemoryLogRawDeallocation) Reset()                    { *m = MemoryLogRawDeallocation{} }
func (m *MemoryLogRawDeallocation) String() string            { return proto.CompactTextString(m) }
func (*MemoryLogRawDeallocation) ProtoMessage()               {}
func (*MemoryLogRawDeallocation) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{5} }

func init() {
	proto.RegisterType((*MemoryLogStep)(nil), "tensorflow.MemoryLogStep")
	proto.RegisterType((*MemoryLogTensorAllocation)(nil), "tensorflow.MemoryLogTensorAllocation")
	proto.RegisterType((*MemoryLogTensorDeallocation)(nil), "tensorflow.MemoryLogTensorDeallocation")
	proto.RegisterType((*MemoryLogTensorOutput)(nil), "tensorflow.MemoryLogTensorOutput")
	proto.RegisterType((*MemoryLogRawAllocation)(nil), "tensorflow.MemoryLogRawAllocation")
	proto.RegisterType((*MemoryLogRawDeallocation)(nil), "tensorflow.MemoryLogRawDeallocation")
}

func init() { proto.RegisterFile("tensorflow/core/framework/log_memory.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x65, 0xd2, 0x86, 0xf6, 0x94, 0x02, 0x8a, 0xa0, 0x84, 0x16, 0x04, 0x0a, 0x42, 0x42,
	0x5c, 0xb4, 0xa8, 0x88, 0x7b, 0xa8, 0x7a, 0x83, 0xc4, 0x9f, 0xca, 0xdb, 0x7d, 0x94, 0x36, 0xa7,
	0x5d, 0xd4, 0x24, 0x8e, 0x1c, 0x57, 0x5d, 0xdf, 0x61, 0xcf, 0xb0, 0xf7, 0xd8, 0x2b, 0xec, 0x89,
	0x76, 0x39, 0x27, 0x8e, 0xe2, 0xac, 0x7f, 0xa4, 0x6e, 0xbb, 0x4a, 0xbe, 0xcf, 0xf6, 0x39, 0xbf,
	0xef, 0x58, 0x86, 0xaf, 0x02, 0xe3, 0x94, 0xf1, 0x79, 0xc8, 0xd6, 0x83, 0x19, 0xe3, 0x38, 0x98,
	0x73, 0x2f, 0xc2, 0x35, 0xe3, 0xcb, 0x41, 0xc8, 0x16, 0x6e, 0x84, 0x11, 0xe3, 0x9b, 0x7e, 0xc2,
	0x99, 0x60, 0x16, 0xe8, 0xbd, 0xdd, 0xe1, 0xe1, 0x73, 0x6a, 0xc5, 0xf5, 0x31, 0x9d, 0xf1, 0x20,
	0x11, 0x01, 0x8b, 0xd5, 0x79, 0xe7, 0x27, 0xb4, 0xff, 0xe6, 0xf5, 0xfe, 0xb0, 0xc5, 0x89, 0xc0,
	0xc4, 0x7a, 0x03, 0x4f, 0x53, 0xf9, 0x75, 0x03, 0xdf, 0x26, 0x1f, 0xc9, 0x17, 0x83, 0x9a, 0x99,
	0xfc, 0xed, 0x5b, 0x1d, 0x30, 0xcf, 0xbc, 0xd8, 0x0f, 0xd1, 0x7e, 0x22, 0xfd, 0x26, 0x2d, 0x94,
	0x73, 0x41, 0xe0, 0x6d, 0x59, 0xe2, 0x34, 0xef, 0xf3, 0x2b, 0x0c, 0xd9, 0xcc, 0xcb, 0xba, 0x1c,
	0x2e, 0xf7, 0x01, 0x5a, 0x4b, 0xe4, 0x31, 0x86, 0x6e, 0x2c, 0x21, 0x8b, 0x9a, 0xa0, 0xac, 0x7f,
	0xd2, 0xb1, 0x7e, 0x80, 0xa9, 0xa8, 0x6d, 0x43, 0xae, 0xb5, 0x86, 0xef, 0xfb, 0x3a, 0x5e, 0x5f,
	0xf5, 0x19, 0xeb, 0x38, 0xb4, 0xd8, 0xec, 0x04, 0xd0, 0xdb, 0xa2, 0x19, 0xa3, 0xa7, 0x79, 0x3e,
	0x41, 0x5b, 0x2b, 0x4d, 0xf5, 0x4c, 0x9b, 0x92, 0xed, 0x33, 0x3c, 0x2f, 0xb4, 0x9c, 0x59, 0x05,
	0xaf, 0x5d, 0xba, 0x19, 0xa1, 0x73, 0x49, 0xe0, 0xf5, 0x56, 0xaf, 0xff, 0x2b, 0x91, 0xac, 0xc4,
	0x23, 0x52, 0xbf, 0x82, 0x7a, 0x10, 0xfb, 0x78, 0x9e, 0x87, 0xae, 0x53, 0x25, 0x2a, 0xb3, 0xa8,
	0xdd, 0x67, 0x16, 0xd7, 0x04, 0x3a, 0x25, 0x20, 0xf5, 0xd6, 0xc7, 0xdc, 0xcb, 0x3b, 0x68, 0xb2,
	0x04, 0x79, 0xbe, 0xab, 0xe0, 0xd3, 0x86, 0xd5, 0x83, 0x66, 0xbc, 0x8a, 0xdc, 0xe9, 0x46, 0x60,
	0x9a, 0x23, 0x1a, 0xb4, 0x21, 0x8d, 0x51, 0xa6, 0xad, 0x97, 0x60, 0x24, 0x42, 0x21, 0xd6, 0x68,
	0xf6, 0xbb, 0x3b, 0xed, 0xfa, 0x51, 0xd3, 0x36, 0xf7, 0x4d, 0xfb, 0x8a, 0x80, 0x5d, 0x0d, 0x73,
	0xe7, 0x5a, 0x1f, 0x18, 0x67, 0x87, 0xcf, 0x38, 0x8a, 0xaf, 0xb6, 0x87, 0xcf, 0xea, 0x42, 0xc3,
	0xc7, 0x39, 0x72, 0x8e, 0x2a, 0x66, 0x83, 0x96, 0x7a, 0xf4, 0x0d, 0x6c, 0xc6, 0x17, 0xd5, 0x4b,
	0x2b, 0x9f, 0xe6, 0xe8, 0x85, 0x8c, 0xa3, 0x72, 0x4d, 0xb2, 0x17, 0x99, 0x4e, 0xc8, 0x0d, 0x21,
	0x53, 0x33, 0x7f, 0x9e, 0xdf, 0x6f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xdc, 0x69, 0x9c, 0x0c,
	0x04, 0x00, 0x00,
}
