// Code generated by protoc-gen-go.
// source: tensorflow/core/framework/step_stats.proto
// DO NOT EDIT!

package tensorflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AllocatorMemoryUsed struct {
	AllocatorName string `protobuf:"bytes,1,opt,name=allocator_name,json=allocatorName" json:"allocator_name,omitempty"`
	TotalBytes    int64  `protobuf:"varint,2,opt,name=total_bytes,json=totalBytes" json:"total_bytes,omitempty"`
	PeakBytes     int64  `protobuf:"varint,3,opt,name=peak_bytes,json=peakBytes" json:"peak_bytes,omitempty"`
	// The bytes that are not deallocated.
	LiveBytes int64 `protobuf:"varint,4,opt,name=live_bytes,json=liveBytes" json:"live_bytes,omitempty"`
}

func (m *AllocatorMemoryUsed) Reset()                    { *m = AllocatorMemoryUsed{} }
func (m *AllocatorMemoryUsed) String() string            { return proto.CompactTextString(m) }
func (*AllocatorMemoryUsed) ProtoMessage()               {}
func (*AllocatorMemoryUsed) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *AllocatorMemoryUsed) GetAllocatorName() string {
	if m != nil {
		return m.AllocatorName
	}
	return ""
}

func (m *AllocatorMemoryUsed) GetTotalBytes() int64 {
	if m != nil {
		return m.TotalBytes
	}
	return 0
}

func (m *AllocatorMemoryUsed) GetPeakBytes() int64 {
	if m != nil {
		return m.PeakBytes
	}
	return 0
}

func (m *AllocatorMemoryUsed) GetLiveBytes() int64 {
	if m != nil {
		return m.LiveBytes
	}
	return 0
}

// Output sizes recorded for a single execution of a graph node.
type NodeOutput struct {
	Slot              int32              `protobuf:"varint,1,opt,name=slot" json:"slot,omitempty"`
	TensorDescription *TensorDescription `protobuf:"bytes,3,opt,name=tensor_description,json=tensorDescription" json:"tensor_description,omitempty"`
}

func (m *NodeOutput) Reset()                    { *m = NodeOutput{} }
func (m *NodeOutput) String() string            { return proto.CompactTextString(m) }
func (*NodeOutput) ProtoMessage()               {}
func (*NodeOutput) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func (m *NodeOutput) GetSlot() int32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *NodeOutput) GetTensorDescription() *TensorDescription {
	if m != nil {
		return m.TensorDescription
	}
	return nil
}

// Time/size stats recorded for a single execution of a graph node.
type NodeExecStats struct {
	// TODO(tucker): Use some more compact form of node identity than
	// the full string name.  Either all processes should agree on a
	// global id (cost_id?) for each node, or we should use a hash of
	// the name.
	NodeName         string                   `protobuf:"bytes,1,opt,name=node_name,json=nodeName" json:"node_name,omitempty"`
	AllStartMicros   int64                    `protobuf:"varint,2,opt,name=all_start_micros,json=allStartMicros" json:"all_start_micros,omitempty"`
	OpStartRelMicros int64                    `protobuf:"varint,3,opt,name=op_start_rel_micros,json=opStartRelMicros" json:"op_start_rel_micros,omitempty"`
	OpEndRelMicros   int64                    `protobuf:"varint,4,opt,name=op_end_rel_micros,json=opEndRelMicros" json:"op_end_rel_micros,omitempty"`
	AllEndRelMicros  int64                    `protobuf:"varint,5,opt,name=all_end_rel_micros,json=allEndRelMicros" json:"all_end_rel_micros,omitempty"`
	Memory           []*AllocatorMemoryUsed   `protobuf:"bytes,6,rep,name=memory" json:"memory,omitempty"`
	Output           []*NodeOutput            `protobuf:"bytes,7,rep,name=output" json:"output,omitempty"`
	TimelineLabel    string                   `protobuf:"bytes,8,opt,name=timeline_label,json=timelineLabel" json:"timeline_label,omitempty"`
	ScheduledMicros  int64                    `protobuf:"varint,9,opt,name=scheduled_micros,json=scheduledMicros" json:"scheduled_micros,omitempty"`
	ThreadId         uint32                   `protobuf:"varint,10,opt,name=thread_id,json=threadId" json:"thread_id,omitempty"`
	ReferencedTensor []*AllocationDescription `protobuf:"bytes,11,rep,name=referenced_tensor,json=referencedTensor" json:"referenced_tensor,omitempty"`
}

func (m *NodeExecStats) Reset()                    { *m = NodeExecStats{} }
func (m *NodeExecStats) String() string            { return proto.CompactTextString(m) }
func (*NodeExecStats) ProtoMessage()               {}
func (*NodeExecStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{2} }

func (m *NodeExecStats) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeExecStats) GetAllStartMicros() int64 {
	if m != nil {
		return m.AllStartMicros
	}
	return 0
}

func (m *NodeExecStats) GetOpStartRelMicros() int64 {
	if m != nil {
		return m.OpStartRelMicros
	}
	return 0
}

func (m *NodeExecStats) GetOpEndRelMicros() int64 {
	if m != nil {
		return m.OpEndRelMicros
	}
	return 0
}

func (m *NodeExecStats) GetAllEndRelMicros() int64 {
	if m != nil {
		return m.AllEndRelMicros
	}
	return 0
}

func (m *NodeExecStats) GetMemory() []*AllocatorMemoryUsed {
	if m != nil {
		return m.Memory
	}
	return nil
}

func (m *NodeExecStats) GetOutput() []*NodeOutput {
	if m != nil {
		return m.Output
	}
	return nil
}

func (m *NodeExecStats) GetTimelineLabel() string {
	if m != nil {
		return m.TimelineLabel
	}
	return ""
}

func (m *NodeExecStats) GetScheduledMicros() int64 {
	if m != nil {
		return m.ScheduledMicros
	}
	return 0
}

func (m *NodeExecStats) GetThreadId() uint32 {
	if m != nil {
		return m.ThreadId
	}
	return 0
}

func (m *NodeExecStats) GetReferencedTensor() []*AllocationDescription {
	if m != nil {
		return m.ReferencedTensor
	}
	return nil
}

type DeviceStepStats struct {
	Device    string           `protobuf:"bytes,1,opt,name=device" json:"device,omitempty"`
	NodeStats []*NodeExecStats `protobuf:"bytes,2,rep,name=node_stats,json=nodeStats" json:"node_stats,omitempty"`
}

func (m *DeviceStepStats) Reset()                    { *m = DeviceStepStats{} }
func (m *DeviceStepStats) String() string            { return proto.CompactTextString(m) }
func (*DeviceStepStats) ProtoMessage()               {}
func (*DeviceStepStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{3} }

func (m *DeviceStepStats) GetDevice() string {
	if m != nil {
		return m.Device
	}
	return ""
}

func (m *DeviceStepStats) GetNodeStats() []*NodeExecStats {
	if m != nil {
		return m.NodeStats
	}
	return nil
}

type StepStats struct {
	DevStats []*DeviceStepStats `protobuf:"bytes,1,rep,name=dev_stats,json=devStats" json:"dev_stats,omitempty"`
}

func (m *StepStats) Reset()                    { *m = StepStats{} }
func (m *StepStats) String() string            { return proto.CompactTextString(m) }
func (*StepStats) ProtoMessage()               {}
func (*StepStats) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{4} }

func (m *StepStats) GetDevStats() []*DeviceStepStats {
	if m != nil {
		return m.DevStats
	}
	return nil
}

func init() {
	proto.RegisterType((*AllocatorMemoryUsed)(nil), "tensorflow.AllocatorMemoryUsed")
	proto.RegisterType((*NodeOutput)(nil), "tensorflow.NodeOutput")
	proto.RegisterType((*NodeExecStats)(nil), "tensorflow.NodeExecStats")
	proto.RegisterType((*DeviceStepStats)(nil), "tensorflow.DeviceStepStats")
	proto.RegisterType((*StepStats)(nil), "tensorflow.StepStats")
}

func init() { proto.RegisterFile("tensorflow/core/framework/step_stats.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x74, 0x53, 0x41, 0x4f, 0xdb, 0x4c,
	0x10, 0x95, 0xbf, 0x84, 0x7c, 0xf1, 0x44, 0x21, 0xc9, 0x22, 0x21, 0x17, 0x84, 0xa0, 0x91, 0x2a,
	0xd1, 0x56, 0x4d, 0x2a, 0x2a, 0xb5, 0x5c, 0x1b, 0x91, 0x43, 0x25, 0x48, 0x91, 0xd3, 0x9e, 0x2d,
	0xc7, 0x9e, 0x14, 0x8b, 0x8d, 0xd7, 0x5a, 0x6f, 0xa0, 0xfc, 0x80, 0xfe, 0x8a, 0xfe, 0xd1, 0x1e,
	0xbb, 0x3b, 0xeb, 0xd8, 0x6e, 0x80, 0xdb, 0xf8, 0xcd, 0x9b, 0xf1, 0xec, 0x9b, 0x37, 0xf0, 0x46,
	0x61, 0x9a, 0x0b, 0xb9, 0xe4, 0xe2, 0x7e, 0x1c, 0x09, 0x89, 0xe3, 0xa5, 0x0c, 0x57, 0x78, 0x2f,
	0xe4, 0xed, 0x38, 0x57, 0x98, 0x05, 0xb9, 0x0a, 0x55, 0x3e, 0xca, 0xa4, 0x50, 0x82, 0x41, 0xc5,
	0x3d, 0xf8, 0xf8, 0x7c, 0x5d, 0xc8, 0xb9, 0x88, 0x42, 0x95, 0x88, 0x34, 0x88, 0x31, 0x8f, 0x64,
	0x92, 0x99, 0xd8, 0xf6, 0x38, 0x38, 0x7b, 0xbe, 0xce, 0x66, 0x1e, 0xd7, 0x0c, 0x7f, 0x3b, 0xb0,
	0xf7, 0xd9, 0x36, 0x15, 0xf2, 0x0a, 0x57, 0x42, 0x3e, 0x7c, 0xcf, 0x31, 0x66, 0xaf, 0x60, 0x37,
	0xdc, 0xc0, 0x41, 0xaa, 0xdb, 0x78, 0xce, 0x89, 0x73, 0xea, 0xfa, 0xdd, 0x12, 0x9d, 0x69, 0x90,
	0x1d, 0x43, 0x47, 0x09, 0x15, 0xf2, 0x60, 0xf1, 0xa0, 0x30, 0xf7, 0xfe, 0xd3, 0x9c, 0x86, 0x0f,
	0x04, 0x4d, 0x0c, 0xc2, 0x8e, 0x00, 0x32, 0x0c, 0x6f, 0x8b, 0x7c, 0x83, 0xf2, 0xae, 0x41, 0xca,
	0x34, 0x4f, 0xee, 0xb0, 0x48, 0x37, 0x6d, 0xda, 0x20, 0x94, 0x1e, 0xa6, 0x00, 0x33, 0x11, 0xe3,
	0xd7, 0xb5, 0xca, 0xd6, 0x8a, 0x31, 0x68, 0xe6, 0x5c, 0x28, 0x9a, 0x64, 0xc7, 0xa7, 0x98, 0x5d,
	0x02, 0x7b, 0xfc, 0x36, 0xfa, 0x4f, 0xe7, 0xec, 0x68, 0x54, 0x09, 0x32, 0xfa, 0x46, 0xe1, 0x45,
	0x45, 0xf2, 0x07, 0x6a, 0x1b, 0x1a, 0xfe, 0x6a, 0x42, 0xd7, 0xfc, 0x70, 0xfa, 0x13, 0xa3, 0xb9,
	0xd9, 0x0e, 0x3b, 0x04, 0x37, 0xd5, 0x40, 0x5d, 0x82, 0xb6, 0x01, 0xe8, 0xf5, 0xa7, 0xd0, 0xd7,
	0x72, 0x98, 0x3d, 0x4a, 0x15, 0xac, 0x92, 0x48, 0x8a, 0x8d, 0x04, 0x46, 0xbc, 0xb9, 0x81, 0xaf,
	0x08, 0x65, 0xef, 0x60, 0x4f, 0x64, 0x05, 0x51, 0x22, 0xdf, 0x90, 0xad, 0x1e, 0x7d, 0x91, 0x11,
	0xd7, 0x47, 0x5e, 0xd0, 0x5f, 0xc3, 0x40, 0xd3, 0x31, 0x8d, 0xeb, 0x64, 0xab, 0xce, 0xae, 0xc8,
	0xa6, 0x69, 0x5c, 0x51, 0xdf, 0x02, 0x33, 0x33, 0x6c, 0x71, 0x77, 0x88, 0xdb, 0xd3, 0x99, 0x7f,
	0xc8, 0x9f, 0xa0, 0xb5, 0xa2, 0x1d, 0x7b, 0xad, 0x93, 0x86, 0x56, 0xe8, 0xb8, 0xae, 0xd0, 0x13,
	0x36, 0xf0, 0x0b, 0x3a, 0x1b, 0x41, 0x4b, 0xd0, 0x12, 0xbc, 0xff, 0xa9, 0x70, 0xbf, 0x5e, 0x58,
	0xad, 0xc8, 0x2f, 0x58, 0xc6, 0x3e, 0x2a, 0x59, 0x21, 0x4f, 0x52, 0x0c, 0x78, 0xb8, 0x40, 0xee,
	0xb5, 0xad, 0x7d, 0x36, 0xe8, 0xa5, 0x01, 0xf5, 0x3b, 0xfb, 0x79, 0x74, 0x83, 0xf1, 0x9a, 0x63,
	0xbc, 0x19, 0xdd, 0xb5, 0xa3, 0x97, 0x78, 0x31, 0xba, 0x5e, 0x84, 0xba, 0x91, 0x18, 0xc6, 0x41,
	0x12, 0x7b, 0xa0, 0x39, 0x5d, 0xbf, 0x6d, 0x81, 0x2f, 0x31, 0x9b, 0xc1, 0x40, 0xe2, 0x12, 0x25,
	0xa6, 0x91, 0x6e, 0x64, 0x47, 0xf3, 0x3a, 0x34, 0xe9, 0xcb, 0x27, 0x9e, 0xa8, 0x57, 0x5d, 0x37,
	0x42, 0xbf, 0xaa, 0xb5, 0x2e, 0x19, 0x46, 0xd0, 0xbb, 0xc0, 0xbb, 0x24, 0xc2, 0xb9, 0xbe, 0x53,
	0x6b, 0x84, 0x7d, 0x68, 0xc5, 0x04, 0x15, 0x2e, 0x28, 0xbe, 0xd8, 0x39, 0x00, 0x19, 0x84, 0x8e,
	0x59, 0x6f, 0xdf, 0xfc, 0xf3, 0xc5, 0xb6, 0x3a, 0xa5, 0x9f, 0x7c, 0x72, 0x13, 0x85, 0xc3, 0x29,
	0xb8, 0x55, 0xfb, 0x73, 0x70, 0x75, 0xc3, 0xa2, 0x8b, 0x43, 0x5d, 0x0e, 0xeb, 0x5d, 0xb6, 0xc6,
	0xf1, 0xdb, 0x9a, 0x4d, 0xd1, 0xe4, 0x3d, 0x78, 0x42, 0xfe, 0xa8, 0x73, 0xcb, 0xb3, 0x9f, 0xf4,
	0xca, 0x82, 0x6b, 0x73, 0xed, 0xf9, 0xb5, 0xf3, 0xc7, 0x71, 0x16, 0x2d, 0x3a, 0xfd, 0x0f, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xbc, 0x41, 0x6a, 0xce, 0xa0, 0x04, 0x00, 0x00,
}
