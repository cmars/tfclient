// Code generated by protoc-gen-go.
// source: tensorflow_serving/apis/get_model_metadata.proto
// DO NOT EDIT!

package tensorflow_serving

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf1 "github.com/golang/protobuf/ptypes/any"
import tensorflow13 "tensorflow/core/protobuf"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Message returned for "signature_def" field.
type SignatureDefMap struct {
	SignatureDef map[string]*tensorflow13.SignatureDef `protobuf:"bytes,1,rep,name=signature_def,json=signatureDef" json:"signature_def,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SignatureDefMap) Reset()                    { *m = SignatureDefMap{} }
func (m *SignatureDefMap) String() string            { return proto.CompactTextString(m) }
func (*SignatureDefMap) ProtoMessage()               {}
func (*SignatureDefMap) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SignatureDefMap) GetSignatureDef() map[string]*tensorflow13.SignatureDef {
	if m != nil {
		return m.SignatureDef
	}
	return nil
}

type GetModelMetadataRequest struct {
	// Model Specification indicating which model we are querying for metadata.
	ModelSpec *ModelSpec `protobuf:"bytes,1,opt,name=model_spec,json=modelSpec" json:"model_spec,omitempty"`
	// Metadata fields to get. Currently supported: "signature_def".
	MetadataField []string `protobuf:"bytes,2,rep,name=metadata_field,json=metadataField" json:"metadata_field,omitempty"`
}

func (m *GetModelMetadataRequest) Reset()                    { *m = GetModelMetadataRequest{} }
func (m *GetModelMetadataRequest) String() string            { return proto.CompactTextString(m) }
func (*GetModelMetadataRequest) ProtoMessage()               {}
func (*GetModelMetadataRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetModelMetadataRequest) GetModelSpec() *ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *GetModelMetadataRequest) GetMetadataField() []string {
	if m != nil {
		return m.MetadataField
	}
	return nil
}

type GetModelMetadataResponse struct {
	// Model Specification indicating which model this metadata belongs to.
	ModelSpec *ModelSpec `protobuf:"bytes,1,opt,name=model_spec,json=modelSpec" json:"model_spec,omitempty"`
	// Map of metadata field name to metadata field. The options for metadata
	// field name are listed in GetModelMetadataRequest. Currently supported:
	// "signature_def".
	Metadata map[string]*google_protobuf1.Any `protobuf:"bytes,2,rep,name=metadata" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetModelMetadataResponse) Reset()                    { *m = GetModelMetadataResponse{} }
func (m *GetModelMetadataResponse) String() string            { return proto.CompactTextString(m) }
func (*GetModelMetadataResponse) ProtoMessage()               {}
func (*GetModelMetadataResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetModelMetadataResponse) GetModelSpec() *ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *GetModelMetadataResponse) GetMetadata() map[string]*google_protobuf1.Any {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func init() {
	proto.RegisterType((*SignatureDefMap)(nil), "tensorflow.serving.SignatureDefMap")
	proto.RegisterType((*GetModelMetadataRequest)(nil), "tensorflow.serving.GetModelMetadataRequest")
	proto.RegisterType((*GetModelMetadataResponse)(nil), "tensorflow.serving.GetModelMetadataResponse")
}

func init() { proto.RegisterFile("tensorflow_serving/apis/get_model_metadata.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 371 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x52, 0xcd, 0x4b, 0xc3, 0x30,
	0x1c, 0xa5, 0x2b, 0x8a, 0x4b, 0x9d, 0x1f, 0x45, 0xb0, 0x16, 0x04, 0x99, 0x08, 0xd3, 0x43, 0x2a,
	0x15, 0x41, 0x86, 0x17, 0xc5, 0x8f, 0xd3, 0x0e, 0x76, 0x20, 0xe8, 0xa5, 0x64, 0xeb, 0xaf, 0xb5,
	0xd8, 0x35, 0x35, 0x49, 0x27, 0xbd, 0x78, 0xf1, 0x9f, 0xf3, 0x4f, 0xf2, 0x68, 0x3f, 0x16, 0xd7,
	0xb9, 0xed, 0xe4, 0x2d, 0x79, 0x79, 0x2f, 0xef, 0x25, 0xef, 0x87, 0x4e, 0x05, 0xc4, 0x9c, 0x32,
	0x3f, 0xa2, 0xef, 0x2e, 0x07, 0x36, 0x0e, 0xe3, 0xc0, 0x22, 0x49, 0xc8, 0xad, 0x00, 0x84, 0x3b,
	0xa2, 0x1e, 0x44, 0xee, 0x08, 0x04, 0xf1, 0x88, 0x20, 0x38, 0x61, 0x54, 0x50, 0x5d, 0x9f, 0x2a,
	0xf0, 0x44, 0x61, 0xee, 0x05, 0x94, 0x06, 0x11, 0x58, 0x25, 0x63, 0x90, 0xfa, 0x16, 0x89, 0xb3,
	0x8a, 0x6e, 0x1e, 0x4f, 0xe9, 0xd6, 0x90, 0xb2, 0x1a, 0xa7, 0xb8, 0xd7, 0x0d, 0x18, 0x49, 0x5e,
	0x26, 0xd4, 0xc3, 0x65, 0x59, 0xca, 0x1c, 0x15, 0xa9, 0xfd, 0xa5, 0xa0, 0xcd, 0x7e, 0x18, 0xc4,
	0x44, 0xa4, 0x0c, 0x6e, 0xc0, 0xef, 0x91, 0x44, 0x7f, 0x46, 0x2d, 0x2e, 0x21, 0xd7, 0x03, 0xdf,
	0x50, 0x0e, 0xd4, 0x8e, 0x66, 0x9f, 0xe3, 0xf9, 0xa8, 0xf8, 0x8f, 0x76, 0x66, 0x7f, 0x1b, 0x0b,
	0x96, 0x39, 0xeb, 0xbc, 0x06, 0x99, 0x4f, 0x68, 0x7b, 0x8e, 0xa2, 0x6f, 0x21, 0xf5, 0x15, 0xb2,
	0xdc, 0x46, 0xe9, 0x34, 0x9d, 0x62, 0xa9, 0x63, 0xb4, 0x32, 0x26, 0x51, 0x0a, 0x46, 0x23, 0xc7,
	0x34, 0xdb, 0xa8, 0x5b, 0xd7, 0xf5, 0x4e, 0x45, 0xeb, 0x36, 0x2e, 0x94, 0xf6, 0x07, 0xda, 0xbd,
	0x07, 0xd1, 0x2b, 0x1e, 0xd7, 0x9b, 0xfc, 0xb1, 0x03, 0x6f, 0x29, 0x70, 0xa1, 0x5f, 0x22, 0x54,
	0x7d, 0x3e, 0x4f, 0x60, 0x58, 0xfa, 0x68, 0xf6, 0xfe, 0xa2, 0xe7, 0x94, 0xea, 0x7e, 0x4e, 0x72,
	0x9a, 0x23, 0xb9, 0xd4, 0x8f, 0xd0, 0x86, 0x2c, 0xcd, 0xf5, 0x43, 0x88, 0xbc, 0x3c, 0x95, 0x9a,
	0x27, 0x6d, 0x49, 0xf4, 0xae, 0x00, 0xdb, 0x9f, 0x0d, 0x64, 0xcc, 0x07, 0xe0, 0x09, 0x8d, 0x39,
	0xfc, 0x33, 0xc1, 0x23, 0x5a, 0x93, 0x5e, 0xa5, 0xb7, 0x66, 0x77, 0x17, 0x69, 0x97, 0xb9, 0x63,
	0x09, 0x54, 0x8d, 0xfc, 0xde, 0x65, 0x3e, 0xa0, 0xd6, 0xcc, 0xd1, 0x82, 0x26, 0x4e, 0x66, 0x9b,
	0xd8, 0xc1, 0xd5, 0x6c, 0x62, 0x39, 0x77, 0xf8, 0x2a, 0xce, 0x6a, 0x2d, 0x5c, 0xab, 0xdf, 0x8a,
	0x32, 0x58, 0x2d, 0x4f, 0xcf, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfe, 0xfe, 0x12, 0x0e, 0x0f,
	0x03, 0x00, 0x00,
}
